import StyleDictionary from "style-dictionary"
import _ from "lodash"

const generatedComment = `/* !!! DO NOT EDIT !!! */
/* This file has been generated by the token pipeline */
`

StyleDictionary.registerFilter({
	name: "isGlobalColor",
	matcher: prop =>
	{
		const rootName = prop.path[0]
		return rootName === "Global" && new Set(prop.path).has("Color")
	},
})

StyleDictionary.registerFilter({
	name: "isAliasColor",
	matcher: prop =>
	{
		const rootName = prop.path[0]
		return rootName !== "Global" && new Set(prop.path).has("Color")
	},
})

StyleDictionary.registerTransform({
	name: "fluentui/react/highContrastColors",
	type: "value",
	matcher: prop => prop.attributes.category === "color",
	transformer: prop =>
	{
		if (typeof prop.value !== "string") return

		// High contrast colors aren't supported for this output, so convert to the expected hard-coded values.
		switch (prop.value.toLowerCase())
		{
			case "canvas": return "#000000"
			case "canvastext": return "#ffffff"
			case "linktext": return "#ffff00"
			case "graytext": return "#3ff23f"
			case "highlight": return "#1aebff"
			case "highlighttext": return "#000000"
			case "buttonface": return "#ffffff"
			case "buttontext": return "#000000"
		}
		return prop.value
	},
})

StyleDictionary.registerTransform({
	name: "fluentui/react/globalColorName",
	type: "name",
	matcher: prop => (
		prop.path[0] === "Global"
	),
	transformer: prop =>
	{
		return prop.path.slice(2).map(_.camelCase).join(".")
	},
})

StyleDictionary.registerTransform({
	name: "fluentui/react/aliasColorName",
	type: "name",
	matcher: prop => (
		prop.path[0] !== "Global"
	),
	transformer: prop =>
	{
		const path: string[] = [...prop.path]
		if (path[1] === "Fill" || path[1] === "Stroke")
		{
			path.splice(1, 2)
		}
		if (path[path.length - 1] === "Rest")
		{
			path.pop()
		}
		return _.camelCase(path.join(" "))
	},
})

StyleDictionary.registerTransformGroup({
	name: "fluentui/react",
	transforms: [
		"fluentui/name/kebab",
		"fluentui/react/highContrastColors",
		"fluentui/react/globalColorName",
		"fluentui/react/aliasColorName",
	],
})

const globalColorTypeMatcher = [
	{ exp: /^grey$/, type: "Record<Greys, string>" },
	{ exp: /Alpha$/, type: "Record<AlphaColors, string>" },
]

const getGlobalColorType = (colorName: string): string | undefined =>
{
	const match = globalColorTypeMatcher.find(({ exp }) => colorName.match(exp))
	return match ? match.type : undefined
}

StyleDictionary.registerFormat({
	name: "react/colors/global",
	formatter: (dictionary, config) =>
	{
		const colors: any = {}
		dictionary.allProperties.forEach(prop =>
		{
			_.setWith(colors, prop.name, prop.value, Object)
		})

		// No brand
		delete colors.brand

		return [
			generatedComment,
			"import type { ColorVariants, Greys, AlphaColors } from '../types';",
			"",
			...Object.keys(colors).map(colorName =>
			{
				if (colors[colorName].shade50 && !colors[colorName].shade60)
				{
					return `export const ${colorName}: ColorVariants = ${JSON.stringify(colors[colorName], null, 2)}`
				}
				const type = getGlobalColorType(colorName)
				const typeString = type ? `: ${type}` : ""
				return `export const ${colorName}${typeString} = ${JSON.stringify(colors[colorName], null, 2)}`
			}),
		].join("\n\n")
	},
})

const firstCharToLowerCase = (input: string): string =>
{
	return input[0].toLowerCase() + input.slice(1)
}

const firstCharToUpperCase = (input: string): string =>
{
	return input[0].toUpperCase() + input.slice(1)
}

const aliasPathToGlobalImport = (resolvedAliasPath: string[], imports: Set<string>): string =>
{
	if (resolvedAliasPath.length < 3 || resolvedAliasPath[0] !== "Global" || resolvedAliasPath[1] !== "Color")
	{
		throw new Error(`Unexpected resolved alias path ${resolvedAliasPath.join(".")}`)
	}

	const exportName = firstCharToLowerCase(resolvedAliasPath[2])

	// grey[14]
	if (resolvedAliasPath.length === 4)
	{
		imports.add(exportName)
		if (isNaN(parseInt(resolvedAliasPath[3], 10)))
		{
			return `${exportName}.${firstCharToLowerCase(resolvedAliasPath[3])}`
		}
		else
		{
			return `${exportName}[${resolvedAliasPath[3]}]`
		}
	}

	if (resolvedAliasPath.length !== 3)
	{
		throw new Error(`Unexpected resolved color alias path ${resolvedAliasPath.join(".")}`)
	}

	imports.add(exportName)
	return exportName
}

StyleDictionary.registerFormat({
	name: "react/colors/alias",
	formatter: (dictionary, config) =>
	{
		const imports = new Set<string>()

		const colorTokens = Object.values<any>(dictionary.allProperties).map((prop) =>
		{
			const value = prop.resolvedAliasPath
				? aliasPathToGlobalImport(prop.resolvedAliasPath, imports)
				: `'${prop.value}'`

			return `\tcolor${firstCharToUpperCase(prop.name)}: ${value}, // ${prop.original.value} ${
				prop.resolvedAliasPath && prop.resolvedAliasPath.join(".")
			}`
		})

		const themeUsesBrand = imports.has("brand")

		return [
			generatedComment,
			`import { ${Array.from(imports).filter(i => i !== "brand").sort().join(", ")} } from '../global/colors';`,
			`import type { ${themeUsesBrand ? "BrandVariants, " : ""}ColorTokens } from '../types';`,
			"",
			`export const generateColorTokens = (${themeUsesBrand ? "brand: BrandVariants" : ""}): ColorTokens => ({`,
			...colorTokens,
			"});",
		].join("\n")
	},
})
